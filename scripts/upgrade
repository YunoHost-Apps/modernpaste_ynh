#!/bin/bash

#=================================================
# GENERIC START
#=================================================
# IMPORT GENERIC HELPERS
#=================================================
source _common.sh
source /usr/share/yunohost/helpers

ynh_abort_if_errors

#=================================================
# LOAD SETTINGS
#=================================================

app=$YNH_APP_INSTANCE_NAME

path_url=$(ynh_app_setting_get "$app" path)
is_public=$(ynh_app_setting_get "$app" is_public)
final_path=$(ynh_app_setting_get "$app" final_path)
db_name=$(ynh_app_setting_get "$app" db_name)
db_pwd=$(ynh_app_setting_get "$app" db_pwd)
domain=$(ynh_app_setting_get "$app" domain)

#=================================================
# ENSURE DOWNWARD COMPATIBILITY
#=================================================

# Fix is_public as a boolean value
if [ "$is_public" = "Yes" ]; then
	ynh_app_setting_set "$app" is_public 1
	is_public=1
elif [ "$is_public" = "No" ]; then
	ynh_app_setting_set "$app" is_public 0
	is_public=0
fi

# If db_name doesn't exist, create it
if [ -z "$db_name" ]; then
	db_name=$(ynh_sanitize_dbid "$app")
	ynh_app_setting_set "$app" db_name "$db_name"
fi

# If final_path doesn't exist, create it
if [ -z "$final_path" ]; then
	final_path=/var/www/$app
	ynh_app_setting_set "$app" final_path "$final_path"
fi
#=================================================
# CHECK THE PATH
#=================================================

# Normalize the URL path syntax
path_url=$(ynh_normalize_url_path "$path_url")

#=================================================
# STANDARD UPGRADE STEPS
#=================================================
# DOWNLOAD, CHECK AND UNPACK SOURCE
#=================================================

# Download, check integrity, uncompress and patch the source from app.src
ynh_setup_source "$final_path"

#=================================================
# NGINX CONFIGURATION
#=================================================

# Create a dedicated nginx config
ynh_add_nginx_config

#=================================================
# UPGRADE DEPENDENCIES
#=================================================

ynh_install_app_dependencies uwsgi uwsgi-plugin-python python-virtualenv \
	default-libmysqlclient-dev \
	ruby-sass

#=================================================
# CREATE DEDICATED USER
#=================================================

# Create a system user
ynh_system_user_create "$app" "$final_path"

#=================================================
# SPECIFIC SETUP
#=================================================
# SPECIFIC SETUP uwsgi
#=================================================

# Copy Files
uwsgi_file="/etc/uwsgi/apps-available/$app.ini"

cp ../conf/uwsgi.ini "$uwsgi_file"
ynh_replace_string "__FINALPATH__" "$final_path" "$uwsgi_file"
ynh_replace_string "__APP__"       "$app"        "$uwsgi_file"

ynh_add_systemd_config

yunohost service add "$app" --log "/var/log/$app/$app.log"

#=================================================
# SPECIFIC SETUP config.py
#=================================================
ikey=$(ynh_string_random)
fkey=$(ynh_string_random)

cp ../conf/config.py "$final_path/app/config.py"

ynh_replace_string "__APP__"       "$app"        "$final_path/app/config.py"
ynh_replace_string "__DOMAIN__"    "$domain"     "$final_path/app/config.py"
ynh_replace_string "__FINALPATH__" "$final_path" "$final_path/app/config.py"
ynh_replace_string "__DBPASSWD__"  "$db_pwd"     "$final_path/app/config.py"
ynh_replace_string "__IDENCKEY__"  "$ikey"       "$final_path/app/config.py"
ynh_replace_string "__FASKKEY__"   "$fkey"       "$final_path/app/config.py"

#=================================================
# PIP INSTALLATION
#=================================================

mkdir -p "$final_path/app/static/build/js"
mkdir -p "$final_path/app/static/build/css"

virtualenv "$final_path/venv"
#run source in a 'sub shell'
(
	set +o nounset
	source "$final_path/venv/bin/activate"
	set -o nounset
	pip install --requirement "$final_path/requirements.txt"
	# already done
	# PYTHONPATH="." python ../build/build_database.py --create

	# don't compile
	# PYTHONPATH="." python ../build/build_js.py --dev
	# requires sass (via gem) for minifying...
	PYTHONPATH="$final_path/app/" python "$final_path/build/build_css.py" --prod
)

#=================================================
# SETUP LOGROTATE
#=================================================

# Use logrotate to manage app-specific logfile(s)
ynh_use_logrotate

#=================================================
# SETUP SYSTEMD
#=================================================

# Create a dedicated systemd config
ynh_add_systemd_config

#=================================================
# GENERIC FINALIZATION
#=================================================
# SECURE FILES AND DIRECTORIES
#=================================================

# Set permissions on app files
chown -R "$app": "$final_path"

#=================================================
# SETUP SSOWAT
#=================================================

# Make app public if necessary
if [ $is_public -eq 1 ]
then
	# unprotected_uris allows SSO credentials to be passed anyway
	ynh_app_setting_set "$app" unprotected_uris "/"
fi

#=================================================
# RELOAD NGINX
#=================================================

systemctl reload nginx
